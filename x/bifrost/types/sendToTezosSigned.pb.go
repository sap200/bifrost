// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bifrost/sendToTezosSigned.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SendToTezosSigned struct {
	Creator               string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id                    uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	TezosReceiver         string `protobuf:"bytes,3,opt,name=tezosReceiver,proto3" json:"tezosReceiver,omitempty"`
	Amount                string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Denom                 string `protobuf:"bytes,5,opt,name=denom,proto3" json:"denom,omitempty"`
	TezosSignerPrivateKey string `protobuf:"bytes,6,opt,name=tezosSignerPrivateKey,proto3" json:"tezosSignerPrivateKey,omitempty"`
}

func (m *SendToTezosSigned) Reset()         { *m = SendToTezosSigned{} }
func (m *SendToTezosSigned) String() string { return proto.CompactTextString(m) }
func (*SendToTezosSigned) ProtoMessage()    {}
func (*SendToTezosSigned) Descriptor() ([]byte, []int) {
	return fileDescriptor_664d122861d1d487, []int{0}
}
func (m *SendToTezosSigned) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendToTezosSigned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendToTezosSigned.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendToTezosSigned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendToTezosSigned.Merge(m, src)
}
func (m *SendToTezosSigned) XXX_Size() int {
	return m.Size()
}
func (m *SendToTezosSigned) XXX_DiscardUnknown() {
	xxx_messageInfo_SendToTezosSigned.DiscardUnknown(m)
}

var xxx_messageInfo_SendToTezosSigned proto.InternalMessageInfo

func (m *SendToTezosSigned) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *SendToTezosSigned) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SendToTezosSigned) GetTezosReceiver() string {
	if m != nil {
		return m.TezosReceiver
	}
	return ""
}

func (m *SendToTezosSigned) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *SendToTezosSigned) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *SendToTezosSigned) GetTezosSignerPrivateKey() string {
	if m != nil {
		return m.TezosSignerPrivateKey
	}
	return ""
}

func init() {
	proto.RegisterType((*SendToTezosSigned)(nil), "sap200.bifrost.bifrost.SendToTezosSigned")
}

func init() { proto.RegisterFile("bifrost/sendToTezosSigned.proto", fileDescriptor_664d122861d1d487) }

var fileDescriptor_664d122861d1d487 = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0xca, 0x4c, 0x2b,
	0xca, 0x2f, 0x2e, 0xd1, 0x2f, 0x4e, 0xcd, 0x4b, 0x09, 0xc9, 0x0f, 0x49, 0xad, 0xca, 0x2f, 0x0e,
	0xce, 0x4c, 0xcf, 0x4b, 0x4d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x2b, 0x4e, 0x2c,
	0x30, 0x32, 0x30, 0xd0, 0x83, 0xaa, 0x83, 0xd1, 0x52, 0x22, 0xe9, 0xf9, 0xe9, 0xf9, 0x60, 0x25,
	0xfa, 0x20, 0x16, 0x44, 0xb5, 0xd2, 0x71, 0x46, 0x2e, 0xc1, 0x60, 0x74, 0x93, 0x84, 0x24, 0xb8,
	0xd8, 0x93, 0x8b, 0x52, 0x13, 0x4b, 0xf2, 0x8b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x60,
	0x5c, 0x21, 0x3e, 0x2e, 0xa6, 0xcc, 0x14, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x96, 0x20, 0xa6, 0xcc,
	0x14, 0x21, 0x15, 0x2e, 0xde, 0x12, 0x90, 0xc6, 0xa0, 0xd4, 0xe4, 0xd4, 0xcc, 0xb2, 0xd4, 0x22,
	0x09, 0x66, 0xb0, 0x7a, 0x54, 0x41, 0x21, 0x31, 0x2e, 0xb6, 0xc4, 0xdc, 0xfc, 0xd2, 0xbc, 0x12,
	0x09, 0x16, 0xb0, 0x34, 0x94, 0x27, 0x24, 0xc2, 0xc5, 0x9a, 0x92, 0x9a, 0x97, 0x9f, 0x2b, 0xc1,
	0x0a, 0x16, 0x86, 0x70, 0x84, 0x4c, 0xb8, 0x44, 0x4b, 0xe0, 0x8e, 0x29, 0x0a, 0x28, 0xca, 0x2c,
	0x4b, 0x2c, 0x49, 0xf5, 0x4e, 0xad, 0x94, 0x60, 0x03, 0xab, 0xc2, 0x2e, 0xe9, 0xe4, 0x7c, 0xe2,
	0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70,
	0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x9a, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49,
	0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x90, 0xc0, 0xd1, 0x87, 0x05, 0x62, 0x05, 0x9c, 0x55, 0x52, 0x59,
	0x90, 0x5a, 0x9c, 0xc4, 0x06, 0x0e, 0x15, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd5, 0xeb,
	0xb9, 0xcd, 0x66, 0x01, 0x00, 0x00,
}

func (m *SendToTezosSigned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendToTezosSigned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendToTezosSigned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TezosSignerPrivateKey) > 0 {
		i -= len(m.TezosSignerPrivateKey)
		copy(dAtA[i:], m.TezosSignerPrivateKey)
		i = encodeVarintSendToTezosSigned(dAtA, i, uint64(len(m.TezosSignerPrivateKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintSendToTezosSigned(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintSendToTezosSigned(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TezosReceiver) > 0 {
		i -= len(m.TezosReceiver)
		copy(dAtA[i:], m.TezosReceiver)
		i = encodeVarintSendToTezosSigned(dAtA, i, uint64(len(m.TezosReceiver)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintSendToTezosSigned(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSendToTezosSigned(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSendToTezosSigned(dAtA []byte, offset int, v uint64) int {
	offset -= sovSendToTezosSigned(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SendToTezosSigned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSendToTezosSigned(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSendToTezosSigned(uint64(m.Id))
	}
	l = len(m.TezosReceiver)
	if l > 0 {
		n += 1 + l + sovSendToTezosSigned(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovSendToTezosSigned(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovSendToTezosSigned(uint64(l))
	}
	l = len(m.TezosSignerPrivateKey)
	if l > 0 {
		n += 1 + l + sovSendToTezosSigned(uint64(l))
	}
	return n
}

func sovSendToTezosSigned(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSendToTezosSigned(x uint64) (n int) {
	return sovSendToTezosSigned(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SendToTezosSigned) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSendToTezosSigned
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendToTezosSigned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendToTezosSigned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSendToTezosSigned
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSendToTezosSigned
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSendToTezosSigned
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSendToTezosSigned
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TezosReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSendToTezosSigned
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSendToTezosSigned
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSendToTezosSigned
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TezosReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSendToTezosSigned
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSendToTezosSigned
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSendToTezosSigned
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSendToTezosSigned
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSendToTezosSigned
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSendToTezosSigned
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TezosSignerPrivateKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSendToTezosSigned
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSendToTezosSigned
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSendToTezosSigned
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TezosSignerPrivateKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSendToTezosSigned(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSendToTezosSigned
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSendToTezosSigned(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSendToTezosSigned
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSendToTezosSigned
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSendToTezosSigned
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSendToTezosSigned
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSendToTezosSigned
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSendToTezosSigned
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSendToTezosSigned        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSendToTezosSigned          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSendToTezosSigned = fmt.Errorf("proto: unexpected end of group")
)
